import type { Tilejson } from "@jsse/geotypes";
import typia from "typia";
export const isTilejson = (() => { const _io0 = (input: any): boolean => "string" === typeof input.name && "pbf" === input.format && ("2.0.0" === input.tilejson || "2.1.0" === input.tilejson || "2.2.0" === input.tilejson || "3.0.0" === input.tilejson) && (Array.isArray(input.tiles) && input.tiles.every((elem: any) => "string" === typeof elem)) && (undefined === input.id || "string" === typeof input.id) && (undefined === input.kind || "vector" === input.kind) && (undefined === input.tilesize || "number" === typeof input.tilesize) && (null !== input.terrain && (undefined === input.terrain || "mapbox" === input.terrain || "terrarium" === input.terrain || "object" === typeof input.terrain && null !== input.terrain && _io1(input.terrain))) && (null === input.version || undefined === input.version || "string" === typeof input.version) && (null === input.description || undefined === input.description || "string" === typeof input.description) && (null === input.minzoom || undefined === input.minzoom || "number" === typeof input.minzoom) && (null === input.maxzoom || undefined === input.maxzoom || "number" === typeof input.maxzoom) && (null === input.bounds || undefined === input.bounds || Array.isArray(input.bounds) && (input.bounds.length === 4 && "number" === typeof input.bounds[0] && "number" === typeof input.bounds[1] && "number" === typeof input.bounds[2] && "number" === typeof input.bounds[3])) && (null === input.center || undefined === input.center || Array.isArray(input.center) && (input.center.length === 3 && "number" === typeof input.center[0] && "number" === typeof input.center[1] && "number" === typeof input.center[2])) && (null === input.attribution || undefined === input.attribution || "string" === typeof input.attribution) && (null === input.template || undefined === input.template || "string" === typeof input.template) && (null === input.scheme || undefined === input.scheme || "xyz" === input.scheme || "tms" === input.scheme) && (null === input.legend || undefined === input.legend || "string" === typeof input.legend) && (null === input.grids || undefined === input.grids || Array.isArray(input.grids) && input.grids.every((elem: any) => "string" === typeof elem)) && (null === input.data || undefined === input.data || Array.isArray(input.data) && input.data.every((elem: any) => "string" === typeof elem)) && (null === input.fillzoom || undefined === input.fillzoom || "number" === typeof input.fillzoom) && (Array.isArray(input.vector_layers) && input.vector_layers.every((elem: any) => "object" === typeof elem && null !== elem && _io2(elem))); const _io1 = (input: any): boolean => "number" === typeof input.r && "number" === typeof input.g && "number" === typeof input.b && "number" === typeof input.o; const _io2 = (input: any): boolean => "string" === typeof input.id && ("object" === typeof input.fields && null !== input.fields && false === Array.isArray(input.fields) && _io3(input.fields)) && (null === input.description || undefined === input.description || "string" === typeof input.description) && (null === input.maxzoom || undefined === input.maxzoom || "number" === typeof input.maxzoom) && (null === input.minzoom || undefined === input.minzoom || "number" === typeof input.minzoom); const _io3 = (input: any): boolean => Object.keys(input).every((key: any) => {
    const value = input[key];
    if (undefined === value)
        return true;
    return "string" === typeof value;
}); const _io4 = (input: any): boolean => "string" === typeof input.name && ("png" === input.format || "jpg" === input.format || "webp" === input.format) && ("2.0.0" === input.tilejson || "2.1.0" === input.tilejson || "2.2.0" === input.tilejson || "3.0.0" === input.tilejson) && (Array.isArray(input.tiles) && input.tiles.every((elem: any) => "string" === typeof elem)) && (undefined === input.id || "string" === typeof input.id) && (undefined === input.kind || "raster" === input.kind) && (undefined === input.tilesize || "number" === typeof input.tilesize) && (null !== input.terrain && (undefined === input.terrain || "mapbox" === input.terrain || "terrarium" === input.terrain || "object" === typeof input.terrain && null !== input.terrain && _io1(input.terrain))) && (null === input.version || undefined === input.version || "string" === typeof input.version) && (null === input.description || undefined === input.description || "string" === typeof input.description) && (null === input.minzoom || undefined === input.minzoom || "number" === typeof input.minzoom) && (null === input.maxzoom || undefined === input.maxzoom || "number" === typeof input.maxzoom) && (null === input.bounds || undefined === input.bounds || Array.isArray(input.bounds) && (input.bounds.length === 4 && "number" === typeof input.bounds[0] && "number" === typeof input.bounds[1] && "number" === typeof input.bounds[2] && "number" === typeof input.bounds[3])) && (null === input.center || undefined === input.center || Array.isArray(input.center) && (input.center.length === 3 && "number" === typeof input.center[0] && "number" === typeof input.center[1] && "number" === typeof input.center[2])) && (null === input.attribution || undefined === input.attribution || "string" === typeof input.attribution) && (null === input.template || undefined === input.template || "string" === typeof input.template) && (null === input.scheme || undefined === input.scheme || "xyz" === input.scheme || "tms" === input.scheme) && (null === input.legend || undefined === input.legend || "string" === typeof input.legend) && (null === input.grids || undefined === input.grids || Array.isArray(input.grids) && input.grids.every((elem: any) => "string" === typeof elem)) && (null === input.data || undefined === input.data || Array.isArray(input.data) && input.data.every((elem: any) => "string" === typeof elem)) && (null === input.fillzoom || undefined === input.fillzoom || "number" === typeof input.fillzoom) && (undefined === input.vector_layers || Array.isArray(input.vector_layers) && input.vector_layers.every((elem: any) => "object" === typeof elem && null !== elem && _io2(elem))); const _iu0 = (input: any): any => (() => {
    if ("png" === input.format || "jpg" === input.format || "webp" === input.format)
        return _io4(input);
    else if ("pbf" === input.format)
        return _io0(input);
    else
        return false;
})(); return (input: any): input is Tilejson => "object" === typeof input && null !== input && _iu0(input); })();
